ToDo

- [ ] Get SadConsole up and running smoothly.
    - [ ] Separate UI Components
    - [ ] Adopt a Layout Manager
    - [ ] Screen and State Management
    - [ ] Decouple Input from UI
    - [ ] Enhance Dependency Injection for UI
    - [ ] Event Handling and UI Updates
    


 Refactor UI Components

 Extract the main game area into a dedicated UI class (e.g., GameAreaPanel).
 Create a separate MessageLog component that encapsulates message display and updates.
 Isolate the CharacterInfoPanel into its own class for clarity and easier management.
 Implement a UI Manager / Layout Manager

 Develop a simple layout manager that organizes the UI components within the GameScreen.
 Centralize UI updates so that each component only refreshes when necessary.
 Enhance Dependency Injection for UI

 Register the new UI components (GameArea, MessageLog, CharacterInfoPanel) in your DI container.
 Ensure that all UI-related classes are resolved via DI, aligning them with the backend structure.
 Centralize UI Event Handling

 Create a dedicated event handler or mediator for UI updates, rather than having components subscribe directly in their constructors.
 Streamline how UI components react to game events to maintain consistency and ease future modifications.
 Review GameLoop Integration

 Adjust the GameLoop so that it delegates UI update responsibilities to the new UI manager/components.
 Verify that input remains decoupled from the UI and that event processing flows smoothly.
 Testing and Validation

 Manually verify that each UI component renders correctly and updates in response to events.
 Consider setting up simple automated tests for UI rendering and event propagation if feasible.